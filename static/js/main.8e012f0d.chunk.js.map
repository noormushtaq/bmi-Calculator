{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","React","useState","weightNumber","setweightNumber","heightNumber","setheightNumber","result","setresult","textResult","settextResult","myColor","setmycolor","className","type","value","onChange","event","currentTarget","style","color","onClick","Math","round","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wOA+GeA,MAzGf,WAAe,IAAD,EAEsBC,IAAMC,SAAS,MAFrC,mBAERC,EAFQ,KAEKC,EAFL,OAGsBH,IAAMC,SAAS,MAHrC,mBAGRG,EAHQ,KAGKC,EAHL,OAIUL,IAAMC,SAAS,GAJzB,mBAIRK,EAJQ,KAIDC,EAJC,OAKkBP,IAAMC,SAAS,IALjC,mBAKRO,EALQ,KAKGC,EALH,OAOYT,IAAMC,SAAS,IAP3B,mBAORS,EAPQ,KAOAC,EAPA,KAsDX,OACI,6BAIP,yBAAKC,UAAU,iBACL,oEAGA,yBAAKA,UAAU,gBACf,2DAEA,2BACCC,KAAK,SACLC,MAAOZ,EACPa,SAzDT,SAA4BC,GACtBb,EAAgBa,EAAMC,cAAcH,WA4DlC,yBAAKF,UAAU,gBACb,8DACA,2BACCC,KAAK,SACLC,MAAOV,EACPW,SA9DX,SAA4BC,GACtBX,EAAgBW,EAAMC,cAAcH,WAiElC,yBAAKF,UAAU,WAER,oDAA0BN,GAEzB,yBAAKM,UAAU,aACb,yCACA,uBAAGM,MAAO,CAACC,MAAMT,IAAWF,KAItC,yBAAKI,UAAU,iBACf,4BAAQA,UAAU,eAChBQ,QA1EJ,WAEEb,EAAUc,KAAKC,MAAMpB,GAAcE,EAAaA,KAEhD,IAAIE,EAAQe,KAAKC,MAAMpB,GAAcE,EAAaA,IAE5CE,GAAQ,IAAIA,EAAO,IACrBG,EAAc,UACdE,EAAW,UAGLL,GAAQ,IAAIA,EAAO,IACnBG,EAAc,eACdE,EAAW,WAGNL,GAAQ,IACXG,EAAc,SACdE,EAAW,QAEJL,EAAO,IACbG,EAAc,gBACdE,EAAW,UAGXF,EAAc,6BACdF,EAAU,KAGlBJ,EAAgB,IAChBE,EAAgB,MA2CrB,cCvFUkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8e012f0d.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\n\n\nfunction App(){\n\n  let[weightNumber,setweightNumber]=React.useState(null);\n  let[heightNumber,setheightNumber]=React.useState(null);\n  let[result,setresult]=React.useState(0);\n  let[textResult,settextResult]=React.useState('');\n\n  let[myColor,setmycolor]=React.useState('');\n \n  \n \n   \n  function handleWeightNumber(event) {\n        setweightNumber(event.currentTarget.value);\n         }\n\n  function handleHeightNumber(event) {\n        setheightNumber(event.currentTarget.value);\n        }\n\n        function calculatBMI(){\n     \n          setresult(Math.round(weightNumber/(heightNumber*heightNumber)));\n          \n          let result=(Math.round(weightNumber/(heightNumber*heightNumber)));\n      \n            if (result>=18&&result<25) {\n              settextResult(\"Normal\");\n              setmycolor(\"green\");\n                   } \n            else \n                if (result>=25&&result<30) {\n                    settextResult(\"over weight\");\n                    setmycolor(\"orange\");\n                    \n                      } \n                else if (result>=30){\n                      settextResult(\"Obese\");\n                      setmycolor(\"red\")\n                 }\n                    else if (result<18){\n                       settextResult(\"Under weight\");\n                       setmycolor(\"blue\")\n                 }\n                    else{\n                       settextResult(\"Please enter numbers only\");\n                       setresult('');\n                       }\n      \n               setweightNumber('');\n               setheightNumber('');     \n          \n        }\n\n   return(\n       <div>\n            \n\n\n<div className=\"BMI-container\">\n          <legend>Body Mass Index (BMI) Calculator</legend>\n       \n\n          <div className=\"BMIcalculato\">\n          <label>Enter your weight in kg </label>\n\n          <input\n           type=\"number\"\n           value={weightNumber}\n           onChange={handleWeightNumber}\n          />\n          </div>\n\n          <div className=\"BMIcalculato\">\n            <label>Enter your height in meter </label>\n            <input\n             type=\"number\"\n             value={heightNumber}\n             onChange={handleHeightNumber}\n             />\n          </div>\n\n          <div className=\"display\">\n                 \n                 <p>Your BMI result is... {result}</p>\n\n                  <div className=\"my-result\">\n                    <p>You are...</p>\n                    <p style={{color:myColor}}>{textResult}</p>\n                    </div>\n            </div>\n          \n          <div className=\"result-button\">\n          <button className=\"BMIcalculato\" \n            onClick={calculatBMI}>\n            result</button>\n          </div>  \n</div>\n\n \n      </div>\n      )\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}